[build-system]
build-backend = "hatchling.build"
requires = ["hatchling>=1.12.2"]

[project]
authors = [
  {name = "daniele arosio", email = "daniele.arosio@cnr.it"}
]
classifiers = [
  "Environment :: Console",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Unix Shell",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Development Status :: 2 - Pre-Alpha"
]
dependencies = [
  "numpy ==1.23.3",
  "pandas ==1.5.0",
  "scikit-image ==0.19.3",
  "matplotlib ==3.6.0",
  "tifffile ==2022.8.12",  # changed >2019.7.2 an OME recognition check and "IYX" -> "TCYX"
  "scipy ==1.9.1",
  "click ==8.1.3",
  "dask[distributed] ==2022.9.2",
  "zarr ==2.13.2",
  "bokeh ==2.4.3",
  "sigfig ==1.3.2"
]
description = "Numerical IMage Analyses."
keywords = ["ClopHensor", "ratio imaging", "image analysis", "chloride", "pH"]
license = "BSD-3-Clause"
license-files = {paths = ["LICENSE.txt"]}
name = "nima"
readme = "docs/README.md"
requires-python = ">=3.8,<3.11"
version = "0.6.0"

[project.optional-dependencies]
dev = [
  "commitizen ==2.35.0",
  "pre-commit ==2.20.0",
  "pre-commit-hooks ==4.3.0",
  "isort ==5.10.1",
  "black ==22.8.0",
  "flake8-eradicate ==1.4.0",
  "pyupgrade >=3.0.0",
  "flake8-pytest-style ==1.6.0",
  "flake8-comprehensions ==3.10.0",
  "pep8-naming >=0.13.2",
  "flake8-rst-docstrings ==0.2.7",
  "ipykernel >=6.16.0",
  "flake8 ==5.0.4",
  "flake8-bugbear ==22.9.23",
  "flake8-docstrings ==1.6.0",
  "darglint ==1.8.1",
  "flake8-bandit ==4.1.1",
  "ipython ==8.5.0"
]
docs = [
  "pydata-sphinx-theme ==0.10.1",
  "sphinx-click ==4.3.0",
  "Sphinx ==5.2.3",
  "Pygments ==2.13.0",
  "myst-parser ==0.18.1"
]
tests = [
  "pytest ==7.1.3",
  "coverage[toml] ==6.5.0",
  "typeguard ==2.13.3",
  "pandas-stubs ==1.5.0.221003",
  "mypy ==0.982",
  "data-science-types ==0.2.23",
  "xdoctest ==1.1.0",
  "types-setuptools ==65.4.0.0"
]

[project.scripts]
bima = "nima.__main__:bima"
# nima = "nima.scripts:main"
nima = "nima.__main__:main"

[project.urls]
homepage = "https://github.com/darosio/nima/"
repository = "https://github.com/darosio/nima/"

[tool.commitizen]
name = "cz_customize"
tag_format = "v$version"
version = "0.6.0"
version_files = [
  "pyproject.toml:version",
  "docs/conf.py:release",
  "docs/README.md:Version"
]

[tool.commitizen.customize]
bump_map = {"^.+!:" = "MAJOR", "BREAKING CHANGE" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "perf" = "PATCH", "refactor" = "PATCH"}
bump_pattern = "^(BREAKING CHANGE|feat|fix|perf|refactor)"
change_type_map = {"feat" = "Feat", "fix" = "Fix", "docs" = "Docs", "build" = "Build", "style" = "Style", "refactor" = "Refactor", "perf" = "Perf", "test" = "Test", "ci" = "CI/CD"}
change_type_order = ["BREAKING CHANGE", "Feat", "Fix", "Docs", "Style", "Perf", "Test", "Build", "CI/CD"]
changelog_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci)?(\\(.*\\))?(!)?"
commit_parser = "^(?P<change_type>feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(?:\\((?P<scope>[^()\r\n]*)\\)|\\()?(?P<breaking>!)?:\\s(?P<message>.*)?"
example = """fix(parser): correct minor typos in code\n
see the issue for details on the typos fixed\n
closes issue #12
"""
info_path = "cz_customize_info.txt"
message_template = "{{change_type}}:{% if show_message %} {{message}}{% endif %}"
schema = """
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
(BREAKING CHANGE: )<footer>
"""
schema_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|bump)(?:\\(([^()\r\n]*)\\)|\\()?(!)?:\\s(.*)?"

[[tool.commitizen.customize.questions]]
choices = [
  {value = "feat", name = "feat: A new feature. Correlates with MINOR in SemVer"},
  {value = "fix", name = "fix: A bug fix. Correlates with PATCH in SemVer"},
  {value = "perf", name = "perf: A code change that improves performance. Correlates with PATCH in SemVer"},
  {value = "docs", name = "docs: Documentation only changes"},
  {value = "style", name = "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"},
  {value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature"},
  {value = "test", name = "test: Adding missing or correcting existing tests"},
  {value = "build", name = "build: Changes that update the build system, development tools or external dependencies"},
  {value = "ci", name = "ci: Changes to our CI configuration files and scripts (example scopes: GitLabCI)"},
  {value = "revert", name = "revert: Reverting to previous commit(s)."}
]
message = "Select the type of change you are committing"
name = "change_type"
type = "list"

[[tool.commitizen.customize.questions]]
message = "Body."
name = "message"
type = "input"

[[tool.commitizen.customize.questions]]
message = "Do you want to add body message in commit?"
name = "show_message"
type = "confirm"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.report]
# fail_under = 100
exclude_lines = [
  "pragma: no cover"
]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["*__init__.py"]
source = ["nima", "tests"]

[tool.hatch.envs.default]
features = ["dev", "tests", "docs"]

[tool.hatch.envs.default.scripts]
bump = [
  "cz bump --major-version-zero -ch {args}",  # e.g. "--increment PATCH"
  "hatch build",
  "hatch publish -r test"
]
ch = "cz ch --incremental --unreleased-version HEAD"
clean = "rm -rf ./build .coverage ./__pycache__ ./.mypy_cache ./.pytest_cache ./docs/_build ./tests/__pycache__ ./dist ./src/nima/__pycache__"
docs = "sphinx-build docs docs/_build"
docserve = "python -m http.server 8000 -d docs/_build"
init = [
  "pre-commit --version",
  "pre-commit install",
  "pre-commit install --hook-type commit-msg --hook-type pre-push"
]
lint = [
  "pre-commit --version",
  "pre-commit run --all-files --hook-stage=manual --show-diff-on-failure {args}"
]
typeguard = "pytest --typeguard-packages=nima {args}"

[tool.hatch.envs.tests]
features = ["tests"]
template = "tests"

[[tool.hatch.envs.tests.matrix]]
python = ["3.10", "3.9", "3.8"]  # reverse order to ensure the presence in older python of module included in newer versions

[tool.hatch.envs.tests.scripts]
all = ["test", "type", "xdoc", "cov"]
cov = [
  "coverage combine",
  "coverage report",
  "coverage xml"
]
test = "coverage run -p -m pytest"
type = "mypy src tests docs/conf.py"
xdoc = "python -m xdoctest nima all"

[tool.isort]
force_single_line = true
lines_after_imports = 2
multi_line_output = 3
profile = "black"

[tool.mypy]
plugins = "numpy.typing.mypy_plugin"
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true
warn_unreachable = true

[tool.pylsp-mypy]
dmypy = false
enabled = true
live_mode = true
strict = true
